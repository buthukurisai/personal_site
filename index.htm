<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sai Ganesh Reddy Buthukuri - Digital Architect & Sentinel</title>
    <link href="https://fonts.googleapis.com/css2?family=Major+Mono+Display&family=Roboto+Mono:wght@300;400;700&display=swap" rel="stylesheet">
    <style>
        /* Your CSS from previous version remains here, no changes needed */
        :root {
            --text-primary: #F0F0F0; /* Near white for main text and contrasts */
            --text-secondary: #AAAAAA; /* Muted grey for supporting text */
            --bg-dark: #0A0A0A; /* Even deeper black for stark contrast */
            --accent-glow: #00FFFF; /* Vibrant Cyan - Default/Fallback for dynamic elements */
            
            /* Dynamic hover color variable */
            --dynamic-hover-color: var(--accent-glow); 
        }

        body {
            font-family: 'Roboto Mono', monospace;
            margin: 0;
            padding: 0;
            background-color: var(--bg-dark);
            color: var(--text-primary);
            line-height: 1.6;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            text-align: center;
            overflow: hidden; 
            position: relative;
        }

        /* --- Dynamic Background Grid Effect (Subtle, as before) --- */
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at center, rgba(0,255,255,0.05) 0%, transparent 70%), 
                repeating-linear-gradient(
                    0deg,
                    transparent,
                    transparent 49px,
                    rgba(255,255,255,0.03) 50px,
                    rgba(255,255,255,0.03) 51px
                ),
                repeating-linear-gradient(
                    90deg,
                    transparent,
                    transparent 49px,
                    rgba(255,255,255,0.03) 50px,
                    rgba(255,255,255,0.03) 51px
                );
            background-size: cover, 100% 50px, 50px 100%;
            opacity: 0.7;
            z-index: -2;
            animation: backgroundPulse 15s infinite ease-in-out;
        }

        @keyframes backgroundPulse {
            0% { opacity: 0.7; transform: scale(1); }
            50% { opacity: 0.5; transform: scale(1.02); }
            100% { opacity: 0.7; transform: scale(1); }
        }

        /* --- Scanline/Noise Overlay (Subtle, as before) --- */
        body::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(rgba(0,0,0,0) 50%, rgba(0,0,0,0.25) 50%), 
                        linear-gradient(90deg, rgba(255,255,255,0.02) 1px, transparent 1px);
            background-size: 100% 4px, 4px 100%;
            pointer-events: none; 
            z-index: -1;
            opacity: 0.6;
            animation: scanlineScroll 15s infinite linear;
        }

        @keyframes scanlineScroll {
            from { background-position: 0% 0%; }
            to { background-position: 100% 100%; }
        }

        .container {
            max-width: 900px;
            padding: 40px;
            box-sizing: border-box;
            background-color: rgba(0, 0, 0, 0.85); 
            border-radius: 8px;
            box-shadow: 0 0 40px rgba(0, 255, 255, 0.3); 
            animation: fadeIn 1.5s ease-out;
            z-index: 1; 
            border: 2px solid var(--accent-glow); 
            backdrop-filter: blur(5px); 
            margin-bottom: 20px; 
            flex-grow: 1; 
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(50px); }
            to { opacity: 1; transform: translateY(0); }
        }

        h1 {
            font-family: 'Major Mono Display', monospace; 
            font-size: 3.8em; 
            margin-bottom: 30px; 
            color: var(--accent-glow); 
            letter-spacing: 5px; 
            text-transform: uppercase;
            text-shadow: 0 0 20px var(--accent-glow), 0 0 35px rgba(0, 255, 255, 0.5); 
            animation: glitchEffect 3s infinite alternate; 
        }

        @keyframes glitchEffect {
            0% { text-shadow: 0 0 20px var(--accent-glow); }
            20% { transform: translateX(3px); text-shadow: 0 0 20px var(--accent-glow), 0 0 25px rgba(0, 255, 255, 0.4); }
            40% { transform: translateX(-3px); text-shadow: 0 0 15px var(--accent-glow); }
            60% { transform: translateX(2px); text-shadow: 0 0 20px var(--accent-glow), 0 0 25px rgba(0, 255, 255, 0.4); }
            80% { transform: translateX(-2px); text-shadow: 0 0 15px var(--accent-glow); }
            100% { text-shadow: 0 0 20px var(--accent-glow); transform: translateX(0); }
        }

        /* --- Typing Text Specifics --- */
        .typing-container {
            min-height: 250px; 
            text-align: left; 
            padding: 0 20px;
            font-size: 1.3em;
            color: var(--text-primary); 
            cursor: default; 
        }

        .typed-text {
            display: inline-block; 
            white-space: pre-wrap; 
            overflow: hidden; 
            line-height: 1.8;
            vertical-align: top; 
        }

        .typing-cursor {
            display: inline-block;
            background-color: var(--accent-glow); 
            width: 3px; 
            height: 1.2em; 
            margin-left: 5px;
            animation: blinkCursor 0.8s infinite; 
            vertical-align: middle;
        }

        @keyframes blinkCursor {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }

        /* Keywords within the typed text */
        .typed-text .keyword-hover {
            display: inline-block; 
            font-weight: 700;
            transition: transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1); 
            will-change: transform, color, text-shadow;
            cursor: pointer;
            white-space: nowrap;
            position: relative; 
            color: inherit; 
        }

        /* --- Dynamic Underline Effect for Keywords --- */
        .typed-text .keyword-hover::after {
            content: '';
            position: absolute;
            left: 50%; 
            bottom: -5px; 
            width: 0; 
            height: 2px; 
            background-color: var(--dynamic-hover-color); 
            transition: width 0.3s ease-out, left 0.3s ease-out, background-color 0.1s; 
            transform: translateX(-50%); 
        }

        .typed-text .keyword-hover:hover::after {
            width: 100%; 
            left: 0; 
            transform: translateX(0); 
        }

        .typed-text .keyword-hover:hover {
            transform: scale(1.15);
        }

        .button-container {
            margin-top: 40px; 
        }

        .button {
            display: inline-block;
            padding: 15px 30px; 
            margin: 0 15px; 
            border: 2px solid var(--dynamic-hover-color); 
            color: var(--dynamic-hover-color);
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 2px; 
            font-size: 1em;
            transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1); 
            background-color: transparent;
            position: relative;
            overflow: hidden;
            box-shadow: 0 0 0 rgba(0, 255, 255, 0.3); 
        }

        .button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background-color: var(--dynamic-hover-color); 
            transition: left 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
            z-index: -1;
        }

        .button:hover::before {
            left: 0;
        }

        .button:hover {
            color: var(--bg-dark); 
            border-color: var(--dynamic-hover-color); 
            transform: translateY(-5px); 
            box-shadow: 0 5px 15px var(--dynamic-hover-color-rgba), 0 0 20px var(--dynamic-hover-color-rgba-light); 
        }

        .button:active {
            transform: scale(0.95); 
            box-shadow: 0 0 5px var(--dynamic-hover-color);
        }

        /* --- Footer Styles --- */
        .footer {
            width: 100%;
            padding: 20px;
            box-sizing: border-box;
            background-color: rgba(0, 0, 0, 0.6); 
            color: var(--text-secondary);
            font-size: 0.85em;
            letter-spacing: 1px;
            border-top: 1px solid rgba(0, 255, 255, 0.1); 
            z-index: 1; 
            margin-top: auto; 
        }

        .footer p {
            margin: 5px 0;
            padding: 0; 
            color: var(--text-secondary); 
        }

        .footer a {
            color: var(--accent-glow); 
            text-decoration: none;
            transition: color 0.3s ease-in-out;
        }

        .footer a:hover {
            color: var(--text-primary);
            text-decoration: underline;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            h1 {
                font-size: 2.2em;
                letter-spacing: 2px;
            }
            .typing-container {
                min-height: 300px; 
                font-size: 1.1em;
            }
            .button {
                display: block;
                margin: 15px auto;
                padding: 12px 25px;
            }
            .container {
                padding: 25px;
            }
            .footer {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>// Engage //</h1>
        <div class="typing-container">
            <span id="typed-text-output" class="typed-text"></span><span class="typing-cursor"></span>
        </div>
        
        <div class="button-container">
            <a href="#work-experience" class="button">Work Experience</a>
            <a href="#projects" class="button">Projects</a>
            <a href="#skills" class="button">Skills</a>
        </div>
    </div>

    <footer class="footer">
        <p>&copy; 2025 Sai Ganesh Reddy Buthukuri. All Rights Reserved.</p>
        <p>Designed and Developed by <a href="#">Sai Ganesh Reddy Buthukuri</a></p>
        <p>Built with Passion and Code.</p>
    </footer>

    <script>
        // --- Typing Animation Script ---
        const textToType = `I'm <span class="keyword-hover">Sai Ganesh Reddy Buthukuri</span>, a dedicated <span class="keyword-hover">Cybersecurity Specialist</span> and <span class="keyword-hover">Software Developer</span>, recently graduated with an <span class="keyword-hover">MSc in Cybersecurity</span> from the <span class="keyword-hover">University of Wolverhampton</span>. My expertise is solidified by practical experience, including engineering secure <span class="keyword-hover">RESTful APIs</span> as a Java Programmer and mastering <span class="keyword-hover">Microservices</span> architecture. My <span class="keyword-hover">MSc project</span> leveraged <span class="keyword-hover">NLP</span> and <span class="keyword-hover">BERT</span> for cutting-edge <span class="keyword-hover">phishing detection</span>, demonstrating my commitment to innovative <span class="keyword-hover">security solutions</span>.

I hold key certifications: <span class="keyword-hover">Microsoft Certified: Azure Fundamentals</span>, <span class="keyword-hover">Azure Security Engineer Associate</span>, and <span class="keyword-hover">Security Operations Analyst Associate</span>. My technical toolkit spans <span class="keyword-hover">Java</span>, <span class="keyword-hover">Python</span>, <span class="keyword-hover">JavaScript</span>, <span class="keyword-hover">NodeJS</span>, <span class="keyword-hover">SQL</span>, and <span class="keyword-hover">NoSQL databases</span>, complemented by essential tools like <span class="keyword-hover">Git</span> and <span class="keyword-hover">Postman</span>. Beyond code, I bring strong <span class="keyword-hover">problem-solving</span>, <span class="keyword-hover">critical thinking</span>, and <span class="keyword-hover">collaborative skills</span>, driven by a keen <span class="keyword-hover">compliance mindset</span>.

This site, designed with a focus on <span class="keyword-hover">clarity and precision</span>, reflects my approach. As you navigate through, discover my <span class="keyword-hover">work experience</span>, diverse <span class="keyword-hover">projects</span>, and comprehensive <span class="keyword-hover">skills</span>, each presented to clearly showcase my capability in building and securing the digital landscape.`;

        const typedTextOutput = document.getElementById('typed-text-output');
        let charIndex = 0;
        const typingSpeed = 25; // Milliseconds per character
        const pauseAfterParagraph = 700; // Pause after each paragraph (approximate)

        function typeWriter() {
            if (charIndex < textToType.length) {
                const char = textToType.charAt(charIndex);
                if (char === '<') { // Handle HTML tags
                    const endIndex = textToType.indexOf('>', charIndex);
                    if (endIndex !== -1) {
                        typedTextOutput.innerHTML += textToType.substring(charIndex, endIndex + 1);
                        charIndex = endIndex + 1;
                    } else { 
                        typedTextOutput.innerHTML += char;
                        charIndex++;
                    }
                } else if (char === '\n') { 
                    typedTextOutput.innerHTML += '<br><br>'; 
                    charIndex++;
                    setTimeout(typeWriter, pauseAfterParagraph);
                    return; 
                } else {
                    typedTextOutput.innerHTML += char;
                    charIndex++;
                }
                setTimeout(typeWriter, typingSpeed);
            } else {
                // IMPORTANT: Ensure this is called AFTER typing is complete
                // and the elements are fully rendered in the DOM.
                setupKeywordHoverDelegation(); 
            }
        }

        // Start typing on page load
        document.addEventListener('DOMContentLoaded', typeWriter);

        // --- Keyword Hover & Dynamic Color Script (using Event Delegation) ---
        const hoverColors = [
            '#00FFFF',  // Cyan
            '#FFD700',  // Gold
            '#FF6347',  // Tomato
            '#ADFF2F',  // GreenYellow
            '#BA55D3',  // MediumPurple
            '#1E90FF',  // DodgerBlue
            '#FF00FF',  // Magenta
            '#00FF7F',  // SpringGreen
            '#FFFF00'   // Yellow
        ];

        function hexToRgba(hex, opacity) {
            let r = 0, g = 0, b = 0;
            if (hex.length === 4) { 
                r = parseInt(hex[1] + hex[1], 16);
                g = parseInt(hex[2] + hex[2], 16);
                b = parseInt(hex[3] + hex[3], 16);
            } else if (hex.length === 7) { 
                r = parseInt(hex.substring(1, 3), 16);
                g = parseInt(hex.substring(3, 5), 16);
                b = parseInt(hex.substring(5, 7), 16);
            }
            return `rgba(${r}, ${g}, ${b}, ${opacity})`;
        }

        // --- Event Delegation Setup ---
        // This function sets up the single event listeners on the parent container.
        function setupKeywordHoverDelegation() {
            const typingContainer = document.querySelector('.typing-container');

            if (!typingContainer) {
                console.error("Error: .typing-container not found for event delegation.");
                return; // Exit if container not found
            }

            // Ensure listeners are added only once
            if (!typingContainer.dataset.listenersAdded) { // Custom flag
                typingContainer.addEventListener('mouseover', function(event) {
                    const target = event.target;
                    // Check if the target or any of its ancestors is a keyword-hover element
                    // This is more robust if the mouse enters a child of the keyword-hover span
                    const keywordElement = target.closest('.keyword-hover'); 

                    if (keywordElement) {
                        const randomColor = hoverColors[Math.floor(Math.random() * hoverColors.length)];
                        
                        // Apply styles directly and ensure transition is active
                        keywordElement.style.transition = 'transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1), color 0.3s ease-out, text-shadow 0.3s ease-out';
                        keywordElement.style.color = randomColor;
                        keywordElement.style.textShadow = `0 0 10px ${randomColor}, 0 0 20px ${hexToRgba(randomColor, 0.5)}`;

                        document.documentElement.style.setProperty('--dynamic-hover-color', randomColor);
                        document.documentElement.style.setProperty('--dynamic-hover-color-rgba', hexToRgba(randomColor, 0.4));
                        document.documentElement.style.setProperty('--dynamic-hover-color-rgba-light', hexToRgba(randomColor, 0.6));
                    }
                });

                typingContainer.addEventListener('mouseout', function(event) {
                    const target = event.target;
                    const keywordElement = target.closest('.keyword-hover');

                    if (keywordElement) {
                        // Reset to original color and shadow
                        keywordElement.style.transition = 'transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1), color 0.4s ease-out, text-shadow 0.4s ease-out';
                        keywordElement.style.color = 'var(--text-primary)'; 
                        keywordElement.style.textShadow = 'none';
                    }
                });
                typingContainer.dataset.listenersAdded = 'true'; // Set flag after adding
            }
        }
    </script>
</body>
</html>
